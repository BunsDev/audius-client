init:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  steps:
    - checkout

    # Download and cache dependencies
    - restore_cache:
        keys:
          - dependency-cache-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - dependency-cache-

    - run: rm -rf /home/circleci/audius-client/node_modules/websocket/.git

    - run: echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > .npmrc

    - run: npm install --ignore-scripts

    - save_cache:
        key: dependency-cache-{{ checksum "package.json" }}
        paths:
          - ./node_modules

    # Lint
    - run:
        name: lint
        command: npm run lint

    # Run tests
    - run:
        name: test
        command: npm test

    # Persist the build directory to a workspace
    - persist_to_workspace:
        root: ./
        paths:
          - node_modules

build-demo:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  resource_class: large
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: build-demo
        # Set the branch name as the PUBLIC_URL so that relative paths work, e.g.
        # demo.audius.co/some-branch/handle/track resolves as /handle/track would at audius.co
        command: export PUBLIC_URL=/${CIRCLE_BRANCH} && npm run build:stage && mv build-staging build-demo
    - persist_to_workspace:
        root: ./
        paths:
          - build-demo

build-staging:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  resource_class: large
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: build-staging
        command: npm run build:stage
    - persist_to_workspace:
        root: ./
        paths:
          - build-staging

build-mobile-staging:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  resource_class: large
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: build-mobile-staging
        command: npm run build:mobile-stage
    - persist_to_workspace:
        root: ./
        paths:
          - build-mobile-staging

build-ipfs-staging:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  resource_class: large
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: build-ipfs-staging
        command: npm run build:ipfs-stage
    - run:
        name: zip build-ipfs-staging
        command: zip -r build-ipfs-staging.zip ./build-ipfs-staging
    - persist_to_workspace:
        root: ./
        paths:
          - build-ipfs-staging.zip

test-staging:
  working_directory: ~/
  docker:
    - image: circleci/node:14.18-browsers
  resource_class: large
  steps:
    - run:
        name: download probers
        command: |
          mkdir -p ~/.ssh && touch ~/.ssh/config && echo $'Host github.com\n\tStrictHostKeyChecking no' > ~/.ssh/config
          git clone git@github.com:AudiusProject/probers.git
          cd probers
    # Download and cache dependencies
    - restore_cache:
        keys:
          - probers-dependency-cache-{{ checksum "probers/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - probers-dependency-cache-
    - run:
        name: install probers dependencies
        command: |
          cd probers
          npm install
    - save_cache:
        key: probers-dependency-cache-{{ checksum "probers/package.json" }}
        paths:
          - ./probers/node_modules
    - attach_workspace:
        at: ./
    - run:
        name: serve and run prober tests
        command: |
          npm install serve
          node web/node_modules/serve/bin/serve.js -l 3001 -s build-staging &
          cd probers
          npm run test:ci

build-production:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  resource_class: large
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: build-production
        command: npm run build:prod-source-maps
    - persist_to_workspace:
        root: ./
        paths:
          - build-production

build-mobile-production:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  resource_class: large
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: build-mobile-production
        command: npm run build:mobile-prod
    - persist_to_workspace:
        root: ./
        paths:
          - build-mobile-production

build-ipfs-production:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  resource_class: large
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: build-ipfs-production
        command: npm run build:ipfs-prod
    - run:
        name: zip build
        command: zip -r build-ipfs-production.zip ./build-ipfs-production
    - persist_to_workspace:
        root: ./
        paths:
          - build-ipfs-production.zip

deploy-demo:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/python:2.7-jessie
  steps:
    - checkout
    - run:
        name: install-awscli
        command: sudo pip install awscli
    - attach_workspace:
        at: ./
    - run:
        name: Deploy to S3
        command: aws s3 sync build-demo s3://frontend-demo.audius.co/${CIRCLE_BRANCH} --delete --cache-control max-age=0
    - pr-comment:
        comment: Preview this change https://demo.audius.co/${CIRCLE_BRANCH}

deploy-staging-s3:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/python:2.7-jessie
  steps:
    - checkout
    - run:
        name: install-awscli
        command: sudo pip install awscli
    - attach_workspace:
        at: ./
    - run:
        name: Deploy to S3
        command: |
          aws s3 sync --exclude ./resources/apple-app-site-association --exclude "sitemaps/*" build-staging s3://staging.audius.co --delete --cache-control max-age=0
          aws s3 cp ./resources/apple-app-site-association s3://staging.audius.co --cache-control max-age=0 --content-type 'application/json' --metadata-directive REPLACE

deploy-staging-cloudflare:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: install wrangler
        command: "npm install @cloudflare/wrangler"
    - run:
        name: Deploy to Cloudflare
        command: |
          cd scripts/workers-site
          npm i
          cd ../../
          mv build-staging build
          cp ./resources/apple-app-site-association build
          echo ${GA_ACCESS_TOKEN} | npx wrangler secret put GA_ACCESS_TOKEN --env staging
          npx wrangler publish --env staging

deploy-mobile-staging:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/python:2.7-jessie
  steps:
    - run:
        name: install-awscli
        command: sudo pip install awscli
    - attach_workspace:
        at: ./
    - run:
        name: Deploy to S3
        command: aws s3 sync build-mobile-staging s3://audius-mobile-staging/build --delete

deploy-ipfs-staging:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/python:2.7-jessie
  steps:
    - run:
        name: install-awscli
        command: sudo pip install awscli
    - attach_workspace:
        at: ./
    - run:
        name: Deploy to S3
        command: aws s3 cp build-ipfs-staging.zip s3://audius-site-ipfs/build-ipfs-staging.zip

update-staging-ga-ipfs-build:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: update ipfs build in ga
        command: npm run update-ipfs-build:stage
    - persist_to_workspace:
        root: ./
        paths:
          - ./build_cid.txt

publish-staging-build-cids:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/python:2.7-jessie
  steps:
    - run:
        name: install-awscli
        command: sudo pip install awscli
    - attach_workspace:
        at: ./
    - run:
        name: Push to S3
        command: aws s3 cp build_cid.txt s3://audius-site-ipfs/build_cid_staging.txt

update-ipfs-staging-records:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  steps:
    - attach_workspace:
        at: ./
    - run:
        name: Update Cloudflare records
        command: |
          DNS_NAME=_dnslink.ipfs.staging.audius.co
          CID=$(cat ./build_cid.txt)
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_AUDIUS_CO_ZONE}/dns_records/${CLOUDFLARE_STAGE_SITE_IPFS_DNS_ID}" \
            -H "X-Auth-Email: ${CLOUDFLARE_AUTH_EMAIL}" \
            -H "Authorization: Bearer ${CLOUDFLARE_AUTH_KEY}" \
            -H "Content-Type: application/json" \
            --data '{"type":"TXT","name":"'"$DNS_NAME"'","content":"\"dnslink=/ipfs/'"$CID"'\"","ttl":1,"proxied":false}'

deploy-release-candidate:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: install wrangler
        command: "npm install @cloudflare/wrangler"
    - run:
        name: Deploy to Cloudflare
        command: |
          cd scripts/workers-site
          npm i
          cd ../../
          mv build-production build
          cp ./resources/apple-app-site-association build
          cp ./robots.txt build
          echo ${GA_ACCESS_TOKEN} | npx wrangler secret put GA_ACCESS_TOKEN --env release
          npx wrangler publish --env release

deploy-production-s3:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/python:2.7-jessie
  steps:
    - checkout
    - run:
        name: install-awscli
        command: sudo pip install awscli
    - attach_workspace:
        at: ./
    - run:
        name: Deploy to S3
        # Deploy, but exclude sourcemaps
        command: |
          aws s3 sync --exclude "*.map" --exclude ./resources/apple-app-site-association --exclude robots.txt --exclude "sitemaps/*" build-production s3://audius.co --delete --cache-control max-age=604800
          aws s3 cp s3://audius.co/index.html s3://audius.co/index.html --cache-control max-age=0,no-cache,no-store,must-revalidate --content-type text/html --metadata-directive REPLACE --acl public-read
          aws s3 cp ./resources/apple-app-site-association s3://audius.co --cache-control max-age=0 --content-type 'application/json' --metadata-directive REPLACE
          aws s3 cp robots.txt s3://audius.co --cache-control max-age=0 --content-type 'application/json' --metadata-directive REPLACE
    - run:
        name: Invalidate cache
        # Note: cache invalidation is charged per path, so this only counts as 1/1000 monthly quota.
        command: aws cloudfront create-invalidation --distribution-id E1ZJ9Z971FJQJ8 --paths "/*"

deploy-production-cloudflare:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: install wrangler
        command: "npm install @cloudflare/wrangler"
    - run:
        name: Deploy to Cloudflare
        command: |
          cd scripts/workers-site
          npm i
          cd ../../
          mv build-production build
          cp ./resources/apple-app-site-association build
          cp ./robots.txt build
          echo ${GA_ACCESS_TOKEN} | npx wrangler secret put GA_ACCESS_TOKEN --env production
          npx wrangler publish --env production

deploy-sentry-sourcemaps:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: install-sentry-cli
        command: npm install @sentry/cli
    - run:
        name: cut-sentry-release
        command: node_modules/.bin/sentry-cli --auth-token ${SENTRY_AUTH_TOKEN} releases --org audius --project audius-client new ${CIRCLE_SHA1}
    - run:
        name: upload-sourcemaps
        command: node_modules/.bin/sentry-cli --auth-token ${SENTRY_AUTH_TOKEN} releases --org audius --project audius-client files ${CIRCLE_SHA1} upload-sourcemaps --no-rewrite build-production
    - run:
        name: finalize-release
        command: node_modules/.bin/sentry-cli --auth-token ${SENTRY_AUTH_TOKEN} releases --org audius --project audius-client finalize ${CIRCLE_SHA1}

deploy-mobile-production:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/python:2.7-jessie
  steps:
    - run:
        name: install-awscli
        command: sudo pip install awscli
    - attach_workspace:
        at: ./
    - run:
        name: Deploy to S3
        command: aws s3 sync build-mobile-production s3://audius-mobile/build --delete

deploy-ipfs-production:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/python:2.7-jessie
  steps:
    - run:
        name: install-awscli
        command: sudo pip install awscli
    - attach_workspace:
        at: ./
    - run:
        name: Deploy to S3
        command: aws s3 cp build-ipfs-production.zip s3://audius-site-ipfs/build-ipfs-production.zip

update-production-ga-ipfs-build:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: update ipfs build in ga
        command: npm run update-ipfs-build:prod
    - persist_to_workspace:
        root: ./
        paths:
          - ./build_cid.txt

publish-production-build-cids:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/python:2.7-jessie
  steps:
    - run:
        name: install-awscli
        command: sudo pip install awscli
    - attach_workspace:
        at: ./
    - run:
        name: Push to S3
        command: aws s3 cp build_cid.txt s3://audius-site-ipfs/build_cid_production.txt

update-ipfs-production-records:
  working_directory: ~/audius-client/web
  docker:
    - image: circleci/node:14.18
  steps:
    - attach_workspace:
        at: ./
    - run:
        name: Update Cloudflare records
        command: |
          DNS_NAME=_dnslink.ipfs.audius.co
          CID=$(cat ./build_cid.txt)
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_AUDIUS_CO_ZONE}/dns_records/${CLOUDFLARE_PROD_SITE_IPFS_DNS_ID}" \
            -H "X-Auth-Email: ${CLOUDFLARE_AUTH_EMAIL}" \
            -H "Authorization: Bearer ${CLOUDFLARE_AUTH_KEY}" \
            -H "Content-Type: application/json" \
            --data '{"type":"TXT","name":"'"$DNS_NAME"'","content":"\"dnslink=/ipfs/'"$CID"'\"","ttl":1,"proxied":false}'

dist-mac-staging:
  working_directory: ~/audius-client/web
  macos: # Run on osx so dmg can be created and signed.
    xcode: "12.2.0"
  steps:
    - checkout
    - attach_workspace:
        at: ./

    - run:
        name: distribute
        command: npm run dist:mac-publish

dist-win-staging:
  working_directory: ~/audius-client/web
  docker:
    - image: electronuserland/builder:wine-mono
  steps:
    - checkout
    - attach_workspace:
        at: ./

    - run:
        name: distribute
        command: npm run dist:win-publish

dist-linux-staging:
  working_directory: ~/audius-client/web
  docker:
    - image: electronuserland/builder
  steps:
    - checkout
    - attach_workspace:
        at: ./

    - run:
        name: distribute
        command: npm run dist:linux-publish

dist-mac-production:
  working_directory: ~/audius-client/web
  macos: # Run on osx so dmg can be created and signed.
    xcode: "12.2.0"
  steps:
    - checkout
    - attach_workspace:
        at: ./

    - run:
        name: distribute
        command: npm run dist:mac-publish-production

dist-win-production:
  working_directory: ~/audius-client/web
  docker:
    - image: electronuserland/builder:wine-mono
  steps:
    - checkout
    - attach_workspace:
        at: ./

    - run:
        name: distribute
        command: npm run dist:win-publish-production

dist-linux-production:
  working_directory: ~/audius-client/web
  docker:
    - image: electronuserland/builder
  steps:
    - checkout
    - attach_workspace:
        at: ./

    - run:
        name: distribute
        command: npm run dist:linux-publish-production

publish-github-release:
  working_directory: ~/audius-client/web
  docker:
    - image: cibuilds/github:0.10
  steps:
    - checkout
    - attach_workspace:
        at: ./
    - run:
        name: "Publish Release on GitHub"
        command: |
          VERSION=$(grep -m1 version ./package.json | awk -F: '{ print $2 }' | sed 's/[", ]//g')
          echo "$VERSION"
          ghr -t ${GHI_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./
